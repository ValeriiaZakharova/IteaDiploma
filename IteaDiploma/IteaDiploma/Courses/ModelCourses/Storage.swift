//
//  Storage.swift
//  IteaDiploma
//
//  Created by Valeriia Zakharova on 22.11.2019.
//  Copyright © 2019 valeriikaaa. All rights reserved.
//

import Foundation
import UIKit

class Storage {
    
    func makeCourseSubject() -> [CourseSubject] {
        let course1 = makeTestingCourse()
        let course2 = makeFrotendCourse()
        let course3 = makeJCCourse()
        let course4 = makePHPCourse()
        let course5 = makeJavaCourse()
        let course6 = makePythonCourse()
        let course7 = makeCCourse()
        let course8 = makeVebCourse()
        let course9 = makeDigitalMarketingCourse()
        let course10 = makeGameDevelopmentCourse()
        let course11 = makeMobileDevelopmentCourse()
        let course12 = makeCiscoCourse()
        let course13 = makeLinoxCourse()
        let course14 = makeMicrosoftCourse()
        return [course1,course2, course3, course4, course5, course6, course7, course8, course9, course10, course11, course12, course13, course14]
    }
    
    func makeTestingCourse() -> CourseSubject{
        
        let item1 = CourseItem()
        item1.title = "QA Base"
        item1.description = """
        Базовый курс QA – программа обучения тестированию ПО с нуля.
        Курс  QA для начинающих включает овладение основными навыками и умениями проведения полноценного процесса тестирования. На QA-курсах вы познакомитесь с фундаментальными понятиями тестирования, научитесь создавать тест-кейсы, узнаете, как находить баги и научитесь создавать отчеты.
        На уроках QA-тестирования вы будете создавать реальные тест-кейсы и изучите все виды и уровни тестов.
        Базовый курс QA – начальная ступень комплексной программы обучения тестированию, после которой вы сможете приступить к изучению Продвинутого курса QA и курса Автоматизированного тестирования.
        """
        item1.informatiion = """
        Программа курса:
        Введение в тестирование ПО.
        Что такое тестирование. Для чего нужно тестирование программного обеспечения
        Жизненный цикл разработки ПО
        Основные документы, которые используются в процессе жизненного цикла разработки ПО
        Для чего нужен Test Plan и как его составлять
        Техника тест дизайна (Equivalence Partitioning, Boundary Values)
        Test Case как основной артефакт тестировщика
        Когда Test Case бывает негативный
        Составление тестового набора для первой тестируемой программы
        Понятие дефекта.
        Что такое баг
        Зачем и где описывать Bug report
        Что такое severity и priority
        Жизненный цикл дефекта
        Системы отслеживания ошибок. Обзор самых популярных систем
        Знакомство с багтрекинговой системой Jira. Описание багов в системе
        Виды требований.
        Виды документов с требованиями к программному обеспечению
        RDD
        SRS
        PRD
        BRD
        Критерии тестирования требований
        Полнота
        Однозначность
        Непротиворечивость
        Реализуемость
        Отслеживаемость
        Тестируемость
        Тестируем регистрационную форму. Специфика тестирования полей электронный адрес и телефон.
        Методологии тестирования.
        Проектная команда. Виды методологий тестирования программного обеспечения
        Водопадная модель
        V-модель
        Итеративная модель
        RUP
        MSF
        Agile
        SCRUM
        Спринт
        Резерв проекта
        Резерв спринта
        Диаграмма выгорания
        Стори Поинт
        Остановка Спринта
        Покер Планирования
        Встречи в Скраме
        Виды тестирования программного обеспечения.
        Функциональное тестирование
        Нефункциональное тестирование
        Тестирование, связанное с изменениями
        Use Case и Check List.
        Что такое Use Case. Для чего нужен. Чем Use Case отличается от Test Case
        Что такое Check List. Где и когда применяют Check List. Может ли Check List заменить Test Case
        Как составить Use Case и Check List на примере тестирования любого предмета
        Случайное тестирование и тестирование без требований
        Ad-Hoc – процесс тестирования без спецификации
        Exploratory – исследовательское тестирование
        Когда применять и для каких проектов
        Применение на практике
        Системы хранения и управления тестовыми случаями.
        Ознакомление с системой TestLink (Easy QA)
        Написание тестовых случаев в системе TestLink (Easy QA)
        Нефункциональные виды тестирования.
        Тестирование производительности
        Нагрузочное тестирование (Performance and Load Testing)
        Стрессовое тестирование (Stress Testing)
        Тестирование стабильности или надежности (Stability / Reliability Testing)
        Объемное тестирование (Volume Testing)
        Тестирование установки (Installation testing)
        Тестирование удобства пользования (Usability Testing)
        Конфигурационное тестирование (Configuration Testing)
        С помощью каких инструментов проводят и для чего
        Контроль полученных знаний.
        Пример стандартного собеседования
        Реальные задачи
        Что такое Pairwise Testing.
        Попарное тестирование. Когда, как и зачем применяется
        PICT - самый простой инструмент для автоматизации таких проверок
        """
        item1.skills = """
        После курса вы сможете:
        Понимать важность тестирования как неотъемлемой части разработки и внедрения программных продуктов
        Использовать на практике все виды и уровни тестов
        Находить баги и писать отчеты о них
        Создавать тест-кейсы и правильно их объединять в наборы
        Разбираться в каждой стадии QA-процесса
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "QA Advanced"
        item2.description = """
        Описание курса:
        Продвинутый курс QA разработан для детального изучения всех существующих возможностей, методов, моделей и жизненных циклов, а также новейших методик тестирования программного обеспечения. Хороший специалист прекрасно понимает, как важна безукоризненная работа программного продукта, которым будут пользоваться миллионы людей по всему миру. Именно поэтому высококвалифицированный тестировщик на сегодня является одним из самых востребованных специалистов в мировой IT-индустрий. Мы научим вас быстрой отладке ПО. Результатом наших совместных усилий будет ваша уверенность в завтрашнем дне как хорошо подготовленного специалиста, способного уже не предлагать свои услуги работодателям, а выбирать только самые лучшие предложения на рынке труда.
        """
        item2.informatiion = """
        Программа курса:
        Основные понятия BDD, TDD, ATDD
        Введение в Gherkin синтаксис
        Практические упражнения по написанию Сценариев
        Введение в HTML - язык разметки гипертекста
        Стандарт HTML. Структура HTML-документа
        Создание HTML-документа
        Создание гиперссылок
        Списки и таблицы
        Введение в CSS
        Типы стилей
        Базовый синтаксис CSS
        Селекторы тегов
        Automation Testing basics
        Что такое XML - расширяемый язык разметки
        Язык XHTML. Разница между HTML и XML
        XML Path Language (Xpath) — язык запросов к элементам xml или xhtml
        Синтаксис XPath. Простые запросы с помощью XPath
        Автоматизированные тесты с помощью Selenium IDE
        Selenium - инструмент, используемый для разработки тестовых сценариев
        Язык команд Selenium
        Создание тестовых сценариев c Selenium IDE
        Часто используемые команды Selenium
        Достоинства и недостатки автоматизации тестирования
        Процесс внедрении автоматизации тестирования
        Что автоматизировать?
        ROI в автоматизации тестирования - коэффициент окупаемости инвестиций
        Зачем измерять эффективность?
        Автоматизация с помощью Selenium IDE
        Что такое База данных
        Виды баз данных
        Реляционная БД
        Системой Управления Баз Данных (СУБД)
        Язык SQL
        SQL- стандарты
        Работа с базами данных в SQL Server
        Создание базовых запросов SELECT
        Объединение таблиц
        Сортировка данных в результате запроса
        Расширенная фильтрация данных
        Как выбрать неповторяющиеся значения из базы данных
        Логический оператор LIKE
        Статистические функции
        MySQL
        Группирование данных
        Предложение HAVING
        Выбор данных из нескольких таблиц
        Вложенный запрос
        Написание выражений используя разные типы JOIN
        MySQL
        Написание простого выражения CASE
        Хранимые процедуры
        Введение в тестирование мобильных приложений
        Виды мобильных приложений
        Особенности тестирования мобильных приложений
        Сервисы для бета-тестирования
        Облачные платформы устройств для тестирования мобильных приложений
        Мобильное тестирование на эмуляторах мобильных устройств
        Что такое Web Service?
        Протокол SOAP
        Структура протокола SOAP
        Язык описания web-сервисов WSDL
        Тестирование веб-сервисов
        SoapUI - кроссплатформенное клиентское оконное приложение
        Функциональное тестирование веб-сервисов
        Создание Test Case с помощью SOAP UI
        REST (Representational state transfer) – стиль архитектуры программного обеспечения для распределенных систем, таких как World Wide Web
        Управление информацией сервиса
        RESTful-системы
        Использование Rest-запросов при тестировании web-сервисов
        Инструмент POSTER для вызова запросов в API интерфейсе
        Создание GET запросов с помощью SOAP UI
        """
        item2.skills = """
        После курса вы сможете:
        Претендовать на должность младшего мануального тестировщика ПО
        Сдать сертификационный экзамен ISTQB Foundation
        """
        item2.image = UIImage(named: "")
        
        let course = CourseSubject()
        course.title = "TESTING"
        course.time = "Evening"
        course.type = "QA"
        course.courseItem = [item1, item2]
        
        return course
    }
    func makeFrotendCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "HTML & CSS"
        item1.description = """
        Описание курса:
        Курс HTML/CSS —  это обучение работе с языком разметки веб-страниц. Программа предназначена для новичков, которые желают изучить основы работы с front end-разработкой.
        На курсе вы сможете освоить HTML с нуля: ознакомиться с теоретическими основами верстки и структурой HTML-документа, порядком публикации документов в web и сможете создавать полноценные страницы. HTML для начинающих является базисом для веб-разработчиков, а после его изучения уже можно начинать работать над реальными проектами. Уже первый урок даст возможность попрактиковаться в создании несложных HTML-страниц, работе с мультимедиа и таблицами стилей CSS.
        """
        item1.informatiion = """
        Программа курса:
        Ввод в веб-технологии
        Предназначение технологий;
        Стек разработки для сайта;
        Принцип работы «клиент-сервер»;
        Консоль разработчика;
        Текстовый редактор и IDE;
        Что такое HTML&CSS&JS и их взаимодействие;
        HTML
        Базовые принципы верстки;
        Знакомство с понятием тега и атрибута;
        Обязательная структура любой веб-страницы;
        Понятия строчных и блочных элементов веб страницы;
        Понятия парных и непарных тегов;
        Семантические теги;
        Спецсимволы;
        Работа с тегами и атрибутами;
        Работа с ссылками и якорями;
        Работа с текстом и комментариями;
        Работа с различными системами цветов в HTML;
        Работа с изображениями;
        Нумерованные и маркированные списки;
        Работа с блоками (div);
        Таблицы;
        Формы;
        Элементы форм (инпуты);
        Айфреймы;
        Подключение разных модулей к документу HTML;
        Форматирование элементов HTML;
        Работа с браузером
        Установка полезных расширений для верстки;
        Отладчик кода;
        Хостинговые и доменные панели;
        Файловый менеджер (Filezilla);
        CSS
        Что такое CSS;
        Базовые принципы написания стилей;
        3 способа добавления CSS на HTML-страницу;
        Внешние таблицы стилей;
        Относительные и статичные единицы измерения;
        Работа со шрифтами (семейства, стили, размеры, насыщенность)
        Работа с границами элементов (бордер, радиус, тени);
        Работа с отступами и размерами элементов;
        Градиенты;
        Работа со свойствами float и clear;
        Flex box;
        Работа с фоном (изображения и цвет, размеры, прозрачность);
        Селекторы;
        Продвинутые селекторы;
        Приоритеты стилей;
        Перезапись стилей;
        Псевдоклассы, псевдоэлементы;
        Работа с анимацией элементов;
        Валидация;
        Медиазапросы;
        Адаптивная верстка;
        Резиновая верстка;
        Pixel perfect верстка;
        Статичная верстка;
        Кроссбраузерная верстка;
        Смешанная верстка;
        Фотошоп для разработчика
        Нарезка макета;
        Основные инструменты;
        Понятия сетки;
        CMS Wordpress: создание и подключение базы данных;
        Настройка тем;
        Настройка плагинов;
        Настройка меню;
        Выгрузка на сервер;
        Правила именования классов по BEM;
        Библиотека Bootstrap;
        Основы препроцессора Less;
        """
        item1.skills = """
        После курса вы сможете:
        Создавать веб страницы;
        Наполнять их содержимым (текстом, ссылками, спецсимволами, изображениями, фонами, подключать иконочные и обычные шрифты и тд);
        Добавлять стили всем элементам веб-страницы;
        Выгружать сайты на хостинг;
        Понимать и разбираться в адаптивной, кроссбраузерной, попиксельной, резиновой, cмешанной и статичной верстках;
        Работать с WORDPRESS (Создавать и подключать базу данных к WP, загружать темы и работать с плагинами);
        Сверстать одностраничный сайт и выгрузить его на хостинг для общего доступа пользователей по ссылке.
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "JavaScript Base"
        item2.description = """
        Описание курса:
        Базовый курс JavaScript позволит вам изучить JavaScript с нуля или упорядочить и дополнить уже существующие знания.
        Уроки JavaScript для новичков посвящены фундаментальным аспектам этого языка программирования: лексическая структура, работа с переменными, типами операторов, функциями, массивами, объектами и другими разновидностями данных.
        Часть курса направлена на обучение работе с системой контроля версий Git и практическим занятиям, благодаря чему JavaScript для начинающих станет максимально ориентированным на получение знаний, применимых в реальных проектах.
        """
        item2.informatiion = """
        Программа курса:
        Введение в Javascript
        Общая информация о языке и его особенности
        Справочники, спецификации и ссылки на них
        Консоль разработчика
        Внешние скрипты и порядок их подключения
        Переменные и правила их именования
        Типы данных и приведение типов
        Основные операторы
        Операторы сравнения и логические значения
        Условные операторы
        Логические операторы
        Конструкция switch
        Циклы и функции
        Циклы 'for', 'while', 'do...while'
        Рекурсия и понятие стека
        Понятие и синтаксис функции
        Функциональные выражения
        Области видимости
        Псевдомассив 'arguments'
        Функции обратного вызова (callback)
        Массивы
        Перебирающие методы
        Внутреннее представление массивов
        Объекты
        Передача по ссылке
        Перебор свойств
        Стандартные встроенные объекты
        Работа с Git
        Работа с Git Bash
        Workflow от создания репозитория до его отправки на удаленный сервер
        Работа с ветками
        Работа с конфигурационными файлами
        """
        item2.skills = """
        После курса вы сможете:
        Работать с консолью разработчика и проверять код на предмет ошибок;
        Проводить различные операции с переменными, операторами, типами данных;
        Создавать приложения с помощью изученных условных и циклических конструкций;
        Более уверенно работать в команде и понимать логику рабочего процесса при разработке приложения.
        """
        item2.image = UIImage(named: "")
        
        let item3 = CourseItem()
        item3.title = "JavaScript Advanced"
        item3.description = """
        Описание курса:
        Данный курс предназначен для тех, кто владеет базовыми знаниями и может использовать различные языковые конструкции для решения повседневных задач. В ходе обучения мы познакомимся с основоположными аспектами объектно-ориентированного программирования, работе с событиями, протоколом HTTP и прочими важными концепциями. Также будет очень много практики, а именно: разработка 8 приложений и решение задач, способствующих успешному прохождению собеседования.
        """
        item3.informatiion = """
        Программа курса:
        Прототипное наследование
        Прототип объекта
        Свойство prototype
        Встроенные классы
        Функция - конструктор
        Наследование классов
        Внутреннее устройство метода 'extend' и полифилл 'Object.create'
        Функциональное наследование
        ООП
        Общая информация про ООП
        Инкапсуляция
        Полиморфизм
        Наследование
        Абстракция данных
        Понятие 'класс'
        Контекст вызова и замыкания
        Работа с 'this' (4 способа использования)
        Использование 'call', 'apply'
        Работа с 'bind', карринг и полифилл
        Дескрипторы, геттеры и сеттеры свойств
        Шаблон проектирования 'Singletone' через замыкание
        Сборщик мусора
        Глобальный объект Window и работа с DOM
        Общая информация про 'window', 'navigator', 'document', 'location', 'history'
        Навигация по DOM элементам
        Свойства узлов
        Добавление и удаление узлов
        Работа со стилями
        Работа с координатами
        События
        Введение в браузерные события
        Порядок обработки событий (Event Loop)
        Асинхронные события
        Работа с SetTimeout/ SetInterval
        Всплытие и перехват
        Делегирование событий
        События с использованием мыши, клавиатуры и прокрутка
        Загрузка документа
        Работа с системой контроля версий
        Формирование страницы в браузере
        Формирование DOM пошагово
        Формирование Render Tree
        Порядок формирования CSSOM
        Оптимизация, минификация, работа с Http Cache.
        Способы хранения данных в браузере
        Cookies
        Localstorage/Sessionstorage
        IndexedDB
        Manifest
        ServiceWorker
        Progressive Web Application
        HTTP
        Введение в Http протокол
        Преимущества и недостатки протокола
        Работа с AJAX
        Общая информация про RESTful API
        JSON
        CORS
        Работа с WebSocket
        Протокол JSONP
        """
        item3.skills = """
        После курса вы сможете:
        Использовать прототипно-ориентированную модель программирования;
        Понимать логику работы клиент-серверной архитектуры в контексте написания реальных приложений;
        Управлять DOM через использование Javascript;
        Работать с локальными хранилищами данных.
        """
        item3.image = UIImage(named: "")
        
        let item4 = CourseItem()
        item4.title = "Frontend Advanced"
        item4.description = """
        Описание курса:
        После окончания этого курса Вы сможете сделать Ваш код более семантичным согласно стандартам HTML5, а также улучшить свои навыки в верстке используя новые теги. Грамотно используя шаблоны проектирования и алгоритмы, Вы сможете правильно подходить к вопросу проектирования крупных проектов, а понимание работы тех или иных алгоритмов превратит написание кода в удовольствие.  Практическая часть курса предполагает написание 3-4 достаточно сложных проектов и постоянное решение задач по алгоритмам.
        """
        item4.informatiion = """
        Программа курса:
        HTML 5
        Audio
        Video
        Data атрибуты
        Новые семантичные теги
        Navigator
        CSS 3
        Адаптивная / кроссбраузерная верстка
        Медиа запросы
        Препроцессоры (SCSS, LESS, SASS)
        Самые попурярные CSS фреймворки (Bootstrap, Foundation)
        Material Design
        CSS анимации
        Canvas
        Работа с API
        Использование при разработке игр
        Шаблоны проектирования
        Антипаттерны
        Наиболее востребованные шаблоны и их применение на практике.
        Шаблоны ООП
        Функциональное программирование
        Работа с системой контроля версий
        Webpack
        Полная настройка конфигурационного файла
        Сравнение с предыдущими версиями
        Использование в действующем проекте
        Использование плагинов
        Хранение данных в браузере
        LocalStorage / SessionStorage
        Проект с использованием средств хранения данных
        Service Workers
        Работа с алгоритмами
        Алгоритмы сортировки
        Алгоритмы комбинаторики и теории множеств
        Алгоритмы теории игр
        Agile / Scrum / Kanban
        React
        Настройка проекта
        Работа с роутами
        Введение в Redux / Mobx
        """
        item4.skills = """
        После курса вы сможете:
        Владеть современным стеком технологий для разработки Frontend
        Знать тонкости работы с браузером, современными библиотеками и фреимворками
        """
        item4.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "FROTEND DEVELOPMEND"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Frotend"
        course.courseItem = [item1, item2, item3, item4]
        return course
    }
    func makeJCCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "React.js"
        item1.description = """
        Описание курса:
        В ходе курса вы познакомитесь с принципиально новым и инновационным подходом в формировании страниц сайтов и приложений, сможете увидеть и принять участие в процессе разработки полноценного SPA (single page aplication), а также усовершенствуешь навыки работы с JavaScript.
        
        """
        item1.informatiion = """
        Программа курса:
        Введение в экосистему фреймворка React
        Императивное и декларативное программирование
        Различные паттерны, применяемые с фреймворками
        Плюсы использования фреймворка
        Настройка первого React-компонента с использованием NPM, Babel, Webpack
        Работа с "props"/"state" компонента
        JSX
        React Router
        Работа с событиями
        Жизненный цикл компонента + AJAX, работа с модулем axios
        Reusable Components
        Redux
        Динамический рендеринг
        Работа с формами
        Использование Promises
        Деплой приложения
        """
        item1.skills = """
        После курса вы сможете:
        Проектировать и строить полноценное приложение или продвинутый сайт на фреимворке React.js
        Использовать последние новинки современной верстки JSX и "Виртуальный DOM" в своей работе
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "React Native Base"
        item2.description = """
        Описание курса
        Программа базового уровня позволит познакомиться с тонкостями использования фреймворка React Native. React Native предлагает ряд интегрированных компонентов, что позволяет разработчикам быстро и эффективно выполнять основные задачи.
        """
        item2.informatiion = """
        Программа курса:
        Введение
        О курсе
        Обзор технологии React
        Обзор технологии React Native
        Актуальность мобильной разработки
        WebView. Гибридные приложения или нативные приложения
        Настройка окружения
        Windows
        Mac
        Linux
        Основы работы с React Native
        Проблемы при настройке среды для работы
        Структура проекта
        «Hello, World!» на React Native
        React vs React Native
        Создание компонентов с JSX
        Единый компонент, как точка входа для обеих платформ
        Стилизация приложения
        Написание стилей для React Native
        Введение во FlexBox
        Создание стилизированных компонентов
        Повторное использование компонентов и стилей
        Получение удаленных данных
        HTTP
        Шаблон компонента «Список»
        Классо-ориентированные компоненты
        Методы жизненного цикла компонента
        Получение данных средствами React Native
        Состояние компонента
        Визуализация списка компонента
        Компоненты для множественного использования - «Карточка»
        Стилизация «Карточки»
        Передача компонента в свойства
        Работа с визуальными компонентами
        Картинки
        Контент, который скроллится
        Кнопки
        Обработка событий
        Стилизация кнопок
        Работа со слоями
        Вкладки
        Обработка данных
        Процесс логина
        Обработка ошибок
        Создание анимации-загрузки
        Условный рендеринг JSX
        Работа с формой
        Обработка событий авторизации
        Redux
        Основы функционального программирования
        Flux
        Основы Redux
        Шаблоны и реализации
        Создание приложения
        Header-приложения
        ListView
        Рендеринг одной строки данных
        Стилизация списков
        Reducer
        Элементы, реагирующие на касания
        Вынесение логики с компонентов
        Анимация
        Тестирование
        Обработка данных React vs Redux
        Форма логирования в Redux-мире
        Обновление формы авторизации
        Неизменность состояния (Immutable State)
        Синхронные и асинхронные действия
        Введение в Redux Thunk
        Создания профиля пользователя
        Навигация
        """
        item2.skills = """
        После курса вы сможете:
        Разрабатывать простые приложения с использованием основных функций фреймворка React Native
        Работать с удаленными данными и визуальными компонентами
        """
        item2.image = UIImage(named: "")
        
        let item3 = CourseItem()
        item3.title = "React Native Advanced"
        item3.description = """
        Описание курса
        Этот курс создан для разработчиков, не желающих останавливаться на достигнутом. Продвинутая программа обучения затронет такие темы, как: работа с анимацией, настройка push-оповещений, запоминание паролей, оффлайн-обработка информации, облачные сервисы, консоль разработки Facebook и другие. Курс профессиональной разработки на React Native направлен на углубленное изучение принципов и методик создания мобильных приложений на этой платформе.
        """
        item3.informatiion = """
        Программа курса:
        Работа с анимациями
        Система анимаций
        Модуль анимаций
        Простейшие анимации
        Движение Круга
        Взаимодействие компонентов
        Кастомизация индивидуальных карточек
        Обработка жестов
        Система отзывов на жесты
        Обработчики событий экрана
        Объект "Жест"
        Перетаскивание карточек
        Применение анимационных стилей
        Анимирование одной карточки
        Поворот элементов
        Интерполяция значений поворота
        Определение минимальных дистанций для свайпа
        Колбеки на свайпы
        Одноразовая авторизация по паролю
        Обзор обычного процесса авторизации
        Одноразовый пароль в деталях
        Обычный сервер против Google Cloud Functions
        Настройка проекта Firebase
        Объект запроса и ответа
        Facebook-аутентификация
        Процесс Facebook-аутентификации
        Консоль разработчика Facebook
        Настройка Redux
        Асинхронное хранение данных
        Логирование в Facebook
        Работа с информацией в offline
        Push-уведомления и сохранение данных
        Сохранение состояния приложения
        Redux-хранение данных
        Push-оповещения
        Обзор Push-оповещений
        Регистрация Push-оповещений
        Генерация Push-оповещений
        Тестирование
        MapViews на React Native
        """
        item3.skills = """
        После курса вы сможете:
        Разрабатывать приложения с полным функционалом, работая с продвинутыми функциями React Native
        Использовать и настраивать кроссплатформенные push-оповещения для пользователей
        Работать с компонентами MapView и определять местонахождение пользователей
        Внедрять в приложения динамичные и анимированные переходы
        """
        item3.image = UIImage(named: "")
        
        let item4 = CourseItem()
        item4.title = "Angular 8 Base"
        item4.description = """
        Описание курса
        Курс создан для новичков сферы Frontend разработки, в ходе которого студенты знакомятся с обновленным фреймворком Angular 8, узнают об основных его преимуществах, возможностях, компонентах и так далее. В процессе обучения слушатели учатся пользоваться формами и HTTP-протоколом, практикуются в работе с TypeScript и изучают весь функционал фреймворка, необходимый для создания одностраничных SPA-приложений.
        """
        item4.informatiion = """
        Программа курса:
        Введение в Angular
        Знакомство с фреймворком
        Основные преимущества
        Уникальные фичи и возможности
        Знакомство с TypeScript
        История версий и основные отличия
        Отличия от предыдущих версий
        Знакомство с разработкой на Angular 8 + запуск первого приложения
        Структура фреймворка
        Описание и функционал основных модулей
        Написание приложения на основе QuickStart
        Angular guidelines + TSLint introduction
        Первый проект: интерактивная одностраничная игра
        Основы работы с CLI
        Инициализация проекта
        Виды шаблонов
        Создание компонентов
        Создание билдов
        Основы работы с DOM в Angular
        Компоненты
        Директивы
        Pipes
        Шаблонизация в Angular 8
        Основы создания Angular Web Components - Angular Elements
        Основы работы с данными в Angular
        Декораторы
        Сервисы
        Привязка данных
        Хранение данных
        Взаимодействие между компонентами
        Работа с формами в Angular
        Основные жизненные циклы приложения на Angular 8
        Подробное изучение методов OnInit и OnDestroy
        Конструктор в компонентах приложения
        Наследование и инкапсулирование свойств и методов компонента
        Роутинг SPA в Angular
        Создание модуля роутинга для приложения
        Подробное знакомство с директивой Router Outlet
        Директивы для работы с роутером
        Создание URL с параметрами и их обработка
        Вложенные роуты
        Основы работы с HTTP
        Разбор модуля HttpClient API
        Интерфейсы для работы со всеми методами HTTP запросов
        Создание запросов к серверу с использованием Promises
        Краткое вступление в Observables
        Второй проект: вики-каталог
        """
        item4.skills = """
        После курса вы сможете:
        Понимать цели разработки фреймворка и преимущества его использования
        Разбираться в принципах двустороннего связывания данных
        Работать с формами, проверять их и обрабатывать ошибки
        Работать со встроенными директивами и создавать свои
        Создавать простые одностраничные приложения, используя фреймворк
        Использовать CLI (Command line interface) для создания и разработки проекта
        """
        item4.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "JS DEVELOPMENT"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Frotend"
        course.courseItem = [item1, item2, item3, item4]
        return course
    }
    func makePHPCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "PHP Base"
        item1.description = """
        О курсе
        У PHP есть три причины удостоить его вниманием: он простой в изучении, он стабильный, он надёжный. Язык PHP один из самых популярных для web-разработки. Wikipedia, Facebook, интернет-магазины — его заслуга.
        В конце курса вы усвоите базовые конструкции PHP, научитесь работать с массивами и создадите собственный интернет-магазин.
        """
        item1.informatiion = """
        Программа курса:
        1. Основы языка PHP:
        Переменные, константы.
        Выражения, операторы.
        Типы данных и приведения типов.
        Управляющие конструкции.
        2. Работа с массивами:
        Циклы.
        Массивы.
        Работа с ассоциативными массивами.
        3. Основы работы с системой контроля версий
        4. Функциональное программирование
        Функции.
        Область видимости переменных.
        Суперглобальные переменные.
        Строгая типизация.
        5. Обзор встроенных функций
        Обзор встроенных функций ( функции для работа со строками, с массивами).
        Рекурсия.
        Стили кодирования.
        6. Фильтрация, валидация данных и работа с формой
        Работа с веб-формами.
        Прием и обработка данных от пользователя.
        Фильтрация и валидация данных.
        Основы HTTP протокола.
        Что собой представляют заголовки ответа и запроса.
        7. Cookie, Sessions
        Регулярные выражения.
        Работа с cookie.
        Sessions.
        Отличия sessions и cookies, их совместное использование.
        8. Реляционная модель баз данных
        SQL – язык запросов.
        Запросы на выборку данных.
        Работа с join.
        Работа с множествами.
        9. Работа над совместным проектом 'Интернет-магазин'
        Разбор архитектурных решений в проекте.
        Знакомство с шаблонами отображения.
        Создание CMS в проекте.
        """
        item1.skills = """
        Чему вы научитесь?
        — Ориентироваться в синтаксисе языка PHP, писать чистый код
        — Понимать особенности back end-разработки и принцип работы веба
        — Основам разработки небольшого проекта
        — Работать с cookie и sessions
        — Понимать основы HTTP-протокола
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "PHP Advanced"
        item2.description = """
        Описание курса:
        В процессе обучения Вы познакомитесь с методами и свойствами объектно-ориентированного программирования и шаблонами проектирования. Также узнаете о протоколах HTTP, MIME-типах контента и управлении кэшем. Мы научим Вас передавать и хранить важную информацию, шифровать и хэшировать. Вы научитесь распознавать атаки и бороться с ними, узнаете об инъекциях SQL и кода. Мы познакомим Вас с фреймворками и MVC, расскажем об архитектуре, структуре проекта, конфигурации, установке и настройке. Вы обучитесь удаленному администрированию и настройке хостинга. По завершении продвинутого курса Вы станете полноценным специалистом в области PHP.
        """
        item2.informatiion = """
        Программа курса:
        Основы Linux
        Установка Ubuntu
        Серверная и десктопная версия
        Базовые команды Linux
        Установка веб-сервера Nginx
        Установка PHP
        Установка MySQL
        Деплой Symfony-приложения на DigitalOcean
        Git-основы
        Установка и настройка
        Команды Git
        Обзор GitHub, GitLab и Bitbucket
        Создание проекта и заливка на GitHub
        Composer
        Установка и настройка
        Автозагрузчик классов
        Обзор официального репозитория Packagist
        Создание собственных пакетов
        PHP 7.x
        Новые возможности PHP 7.0
        Новые возможности PHP 7.1
        Новые возможности PHP 7.2
        Новые возможности PHP 7.3
        Новые возможности PHP 7.4
        ООП
        Инкапсуляция
        Наследование
        Полиморфизм
        Классы и Объекты
        Абстрактные классы
        Интерфейсы
        Методы класса
        Статические методы
        Магические методы
        Константы
        Трейты
        Исключения
        Неймспейсы
        Автозагрузка
        Композиция вместо наследования
        Стандарты PSR
        Обзор стандартов PSR-0, PSR-4 и PSR-1, PSR-2
        Шаблоны проектирования, SOLID, DRY, KISS, YAGNI
        Основные порождающие шаблоны
        Основные структурные шаблоны
        Основные поведенческие шаблоны
        Reflection API
        PHPDoc
        phpDocummentor
        Аннотации
        Standard PHP Library (SPL)
        Структуры данных
        Итераторы
        Основные классы и функции
        Безопасность в PHP
        Основные типы атак
        Шифрование
        Хеширование
        Стандартные практики по защите веб-приложений
        Symfony Security компонент
        Отладка, предупреждение ошибок, профилирование, оптимизация
        Какие бывают типы ошибок в PHP, иерархия классов исключений
        Конструкция try-catch-finally
        Создание собственных классов исключений
        Логирование ошибок и его важность
        Профилирование кода
        Отладка xDebug, анализ чужого кода
        REST
        Обзор архитектуры REST
        Модель зрелости REST-сервисов
        HATEOAS
        Стандарт HAL
        Спецификация JsonAPI
        Клиент Guzzle
        FOSRestBundle для Symfony
        Тестирование
        Юнит тесты
        Функциональные тесты
        Фреймворки для тестирования Codeception, PHPUnit, Symfony PHPUnit Bridge
        CI-сервисы: Travis CI, Scrutinizer CI
        Использование Docker. Контейнеризация приложения
        Введение в docker
        Что такое контейнер?
        Отличие docker от vagrant
        Введение в docker-compose
        Создание LEMP стека на базе docker
        СУБД MySQL
        Объединение таблиц
        Индексы
        Оптимизация запросов и команда EXPLAIN
        Транзакции
        Триггеры и хранимые процедуры
        Движки InnoDB & MyISAM
        Сервисная архитектура
        Понятие сервисов
        Контейнеры
        Dependency Injection
        Обзор популярных фреймворков
        Zend Framework
        Yii Framework
        Phalcon Framework
        Laravel Framework
        Symfony Framework
        MVC и Symfony4 фреймворк
        Установка и настройка
        Создание простой страницы
        Роутинг
        Twig
        Doctrine ORM
        Компоненты Symfony
        Yaml
        Filesystem
        Finder
        Console
        Process
        PHPUnit Bridge
        Validator
        Form
        """
        item2.skills = """
        После курса вы сможете:
        Владеть PHP в совершенстве
        Выполнять сложные проекты, в т.ч. с использованием фреймворков
        Претендовать на должность Junior Developer в ІТ-компаниях
        Брать проекты на фрилансе
        Организовать собственный стартап
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "PHP"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2]
        return course
    }
    func makeJavaCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Разработка Java веб-приложений"
        item1.description = """
        Описание курса:
        Вы познакомитесь со Spring Core и спецификацией Java Persistence API (JPA). Рассмотрите, что представляют из себя Servlet container и базовая технология для формирования отображения Java Server Pages (JSP). Затем перейдете к изучению Spring MVC и стандартной архитектуре веб-приложений. Рассмотрите RESTful веб-сервисы, на основе которых сейчас создаются современные приложения. В завершение узнаете, как организован процесс разработки приложений с использованием систем Continuous Integration. Во время курса Вы разработаете учебное веб-приложение в соответствии с шаблоном MVС, взаимодействующее с СУБД с помощью JPA. Далее перепишете его на основе Spring MVC и добавите в него поддержку RESTful веб-сервисов.
        """
        item1.informatiion = """
        Программа курса:
        Maven/Ant build tools
        Building with  dependencies and resources
        Creating box(production) version
        War-archive
        SOLID (basic principles of object-oriented programming and design)
        Dependency injection (DI) and Inversion of control (IoC)
        Java  beans
        Apache Tomcat
        Installation,first run, short guide
        Java Server Pages.Model 1
        Overview
        Syntax
        Java code on JSP, imports
        Java Server Pages.Model 2. Expression Language
        Overview
        Syntax
        Additional tags
        GET, POST methods
        Using DataBases
        Connecting  to MySQL
        Authorization and registration forms
        Forms error checking
        Working with GIT
        Using beans in EL
        Understanding of Model
        Adding front-end: Integrating templates into project
        Sessions
        Login-Logout script
        Manage users
        User data protection
        Servlets
        Web Container
        Servlet container
        Life cycle of a servlet
        Filters
        Web.xml
        MVC (model-view-controller)
        JSP+Servlet
        MVC pattern
        Data Connection Pool
        Spring: Framework
        Overwiew
        Creating beans
        xml style vs annotations style
        Spring MVC
        DispatcherServlet
        Context Hierarchy
        Web MVC Config
        Building and deploying  spring-mvc WAR
        Objects relational mapping (ORM)
        Java Persistence API (JPA)
        Hibernate framework
        Adding to project other technologies
        JavaScript
        JSON (JavaScript Object Notation)
        AJAX (asynchronous JavaScript and XML)
        SOAP and RestFull
        Overview
        RESTful Web Service on SpringBoot
        """
        item1.skills = """
        После курса вы сможете:
        Разрабатывать приложения
        Приступить к дальнейшему профессиональному изучению Spring Core, SpringMVC и ORM-фреймворков
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Scala programming"
        item2.description = """
        Описание курса:
        Цель курса – научить студентов программированию на языке Scala. Курс предназначен для тех, кто уже владеет основами разработки на Java (или на другом языке) и понимает принципы ООП.
        В ходе уроков вы научитесь разработке, отладке и настройке приложений на Scala, познакомитесь как с функциональными, так и с объектно-ориентированными конструкциями языка. Вы получите знания, необходимые для изучения таких популярных фреймворков, как Spark, Play Framework, Akka и углубиться в работу с BigData и Web-разработкой.
        """
        item2.informatiion = """
        Программа курса:
        Общая характеристика Scala
        История языка
        Байт-код
        Виртуальная машина (JVM)
        Поиск и загрузка классов
        Создание и запуск приложения на Scala
        Использование IDE для создания и выполнения Scala-программ
        Чтение-вычисление-вывод/REPL — read-eval-print loop
        Особенности реализации
        Основные функции
        Power-мод
        Переменные в Scala
        Values
        Variables
        Операторы
        Типы операторов
        Создание и использование
        Порядок очередности
        Строки
        Создание строк и работа с ними
        Интерполяция
        “s” интерполятор
        “f” интерполятор
        “raw” интерполятор
        Типы данных
        Иерархия типов
        Type inference
        Типы Any, AnyVal, AnyRef
        Тип Nothing
        Scala Null
        Функции и методы
        Функция и метод
        Side effect, pure functions
        Рекурсия
        Функции высшего порядка (Higher-order functions)
        Анонимные функции
        Частичные функции
        Частичное применение функций
        Currying
        Функциональные комбинаторы
        Классы и объекты
        ООП в Scala
        Класс
        Объект
        Companion object
        Сопоставление с образцом (Pattern matching)
        Сопоставление с образцом: литералы
        Сопоставление с образцом: классы
        Сопоставление с образцом: коллекции
        Запечатанные (Sealed) классы
        Кейс класс
        Кейс объект
        Вложенный класс
        Trait
        Примеси и множественное наследование
        Обобщения
        Валидация
        Package & package
        Монады в Scala
        Определение монады
        Монады в коллекциях
        Монада “Option”, класс “Some” и объект “None”
        For-comprehension
        Обработка исключений
        Как работают исключения в Scala
        Иерархия исключений
        Способы обработки исключений
        Массивы
        Создание и использование массивов
        Одномерные массивы
        Многомерные массивы
        Операции над массивами
        Коллекции
        Иерархия коллекций
        Кортежи/Tuple
        Списки/List
        Коллекции неповторяющихся элементов /Set
        Последовательности упорядоченных элементов /Seq
        Карты/Map
        Объект Nil
        Обход коллекций, операции над коллекциями
        Сравнение производительности коллекций
        Implicits
        Неявные параметры
        Неявные преобразования
        Неявные классы
        Type classes
        Future
        Определение, создание и использование
        Callbacks
        Projections
        Promises
        SBT (Scala Build Tool)
        Testing
        """
        item2.skills = """
        После курса вы сможете:
        Использовать функциональные и объектно-ориентированные конструкции языка Scala
        Разрабатывать и проводить отладку Scala-приложений
        Собирать Scala-проекты с помощью SBT
        Тестировать написанный код
        Начать изучение фреймворков: Spark, Play Framework, Akka и др.
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "JAVA"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2]
        return course
    }
    func makePythonCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Python Base"
        item1.description = """
        Описание курса
        Базовый курс Python Programming – программа изучения программирования на Python для начинающих. Курс является введением в обучение Python и охватывает основные аспекты программирования с его использованием. Изучение Python с нуля дает возможность познакомиться с ключевыми понятиями языка для дальнейшего овладения им на Продвинутом курсе Python.
        """
        item1.informatiion = """
        Программа курса:
        Зачем нужны компьютерные программы?
        Программирование как творческий процесс
        Архитектура компьютера
        В чем суть программирования?
        Процесс «общения» с Python
        Интерпретатор и компилятор
        Процесс написания программ
        Что же такое программа?
        Принципы программирования
        Парадигмы программирования
        Упражнения
        Переменные, выражения и инструкции Python
        Понятие «значение» и «тип»
        Переменные
        Имена переменных и ключевые (зарезервированные) слова
        Операторы
        Операторы и операнды
        Выражения
        Порядок операций
        Срочные операции
        Ввод данных
        Комментарии
        Упражнения
        Основы работы с системой контроля версий
        Управление потоком выполнения
        Логические выражения
        Логические операторы
        Условное выполнение
        Последовательность условий
        Вложенные условия
        Перехват исключений с использованием try и except
        Упражнения
        Итерации
        Обновления переменной
        Инструкция while
        Бесконечные циклы
        «Бесконечные циклы» и break
        Завершение итерации с помощью continue
        Списки
        Определение циклов с помощью for
        Обход списков с помощью цикла for
        Упражнения
        Функции и модули
        Вызов функции
        Встроенные функции
        Функции приведения типов
        Случайные числа
        Математические функции
        Добавление новых функций
        Определение и использование
        Параметры функции
        Модульные тесты
        Имена файлов и пути
        Создание собственных модулей и пакетов
        Инициализация пакета
        Обработка аргументов командной строки
        Определение параметров среды выполнения
        Создание виртуальных сред
        Автоматическая инициализация пакетов
        Упражнения
        Строки
        Строка - это последовательность
        Получение длины строки с использованием len
        Обход через строку с помощью цикла
        Срез строки
        Строки являются неизменными
        Оператор in
        Сравнение строк
        Строчные методы
        Разбор (parsing) строк
        Оператор форматирования
        Регулярные выражения
        Упражнения
        Файлы
        Введение
        Открытие файлов
        Текстовый файл и строки
        Чтение файлов
        Поиск через файл
        Оператор with
        Запись файлов
        Упражнения
        Коллекции
        Списки и кортежи
        Методы списков
        Объекты и значения
        Словари и множества
        Словарь как набор счетчиков
        Словари и файлы
        Циклы и словари
        Множества
        Упражнения
        Элементы функционального программирования
        Функция объект первого класса
        Функции, зависящие от функций
        Замыкания
        Лямбда-функции
        Декораторы
        Упражнения
        Объектно-ориентированное программирование
        Определение класса
        Поля и методы класса
        Инкапсуляция
        Наследование
        Полиморфизм
        "Утиная" типизация
        Упражнения
        """
        item1.skills = """
        После курса вы сможете:
        Понимать принципы программирования
        Проектировать структуру программ
        Создавать программы среднего уровня сложности на языке Python
        Создавать небольшие инструментальные программы
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Python Advanced"
        item2.description = """
        Описание курса
        Курс предназначен для тех, кто уже владеет основами разработки на Pythonи желает освоить продвинутые умения и навыки программирования на Python.
        Курс также будет полезен уже квалифицированным пользователям. Программа построена по принципу 20% лекционного материала, 80% лабораторные работы.
        """
        item2.informatiion = """
        Программа курса:
        Функции.
        Типы данных
        Встроенные контейнеры
        Операторы контроля выполнения
        Обработка ошибок (try ... except ...)
        Операторы циклов
        Comprehensions (list, dict, set)
        Создание функции и процедур
        Аргументы функций
        Рекурсивные функции
        Functors, Currying
        Декораторы
        Lambda-функции
        PEP8
        Объектно-ориентированный подход
        Объявление класса и создание экземпляра
        Принципы ООП (подражание, инкапсуляция, полиморфизм) в Python
        Область видимости (Namespaces, Scope, правило LEGB)
        Method Resolution Order (MRO)
        Магические методы
        Определение математических операций для объектов Python
        Определение операций сравнения для объектов Python
        Определение операций хеширования для объектов Python
        Создание копии экземпляра класса, deep copy, shallow copy
        Инкапсуляция (Setters and getters)
        Управление созданием экземпляров класса
        Doc strings
        Meta-классы
        Abstract Bases-классы
        __new__
        __init__
        Context-managers
        Использованием декораторов с классами
        Контейнеры, созданные путем наследования (UserList, UserDict, UserString)
        Контейнеры, созданные путем агрегации
        Методы доступа к элементам контейнера
        Iterators, Generators
        Приемы объектно-ориентированного программирования
        Software Engineering как процесс
        Язык UML
        Принципы SOLID
        Метрики качества кода
        Design Patterns (категории, примеры использования)
        Singletone
        Facade
        Interface
        Proxy
        Abstract Factory
        Factory Method
        Command
        Observer
        Модули и пакеты
        Разработка модулей (определение и запуск)
        Система импорта
        Разработка повторно используемых пакетов
        Менеджер пакетов pip и виртуальные среды virtualenv
        Setup.py
        Написание документации к пакету, модулю
        Создание приложений на основе пакетов
        Работа с файлами
        Работа с системой контроля версий Git
        Форматирования строк
        Context-managers
        Работа с файловой системой (os, os.path, shutil)
        Сериализация с помощью pickle
        Управление порядком сериализации/десериализации объектов Python
        Сериализация данных в json
        Сериализация данных в xml
        Встроенные пакеты Python.
        Работа с datetime и calendar
        Работа с collections (очереди, именуемые кортежи, вложенные словари)
        Работа с heapq, array, enum
        Работа с числовыми данными (numbers, math, decimal, random)
        Работа с contextlib
        Работа с functools
        Logging
        Unittest
        Networking
        Sockets (основы работы, примеры серверов)
        Socket server
        Socket Client
        HTTP
        HTML, парсинг HTML-файлов
        XML
        Многопоточность в Python
        Global Interpreter Loc (GIL)
        Создание потоков в Python
        Контроль доступа к ресурсам
        Синхронизация потоков
        Создание потоков с помощью пакета concurent
        Пул потоков
        Процессы в Python
        Пакет multiprocessing
        Interprocess communication
        Очереди задач
        Создание процессов с помощью пакета concurent
        Пул процессов
        Отсрочка задач с помощью пакета sched
        Асинхронное программирование
        Asyncio
        Пакет Twisted
        Асинхронный фреймворк Aiohttp
        Сбор данных с помощью фреймворка Scrapy
        SQL
        Основы реляционных баз данных
        ER-диаграммы
        Стандарт PEP249
        Работа с СУБД SQLite, PostgreSQL
        Основы языка SQL (SELECT, LIKE, ORDER BY, LIMIT)
        INSERT
        UPDATE
        DELETE
        JOIN (INNER, LEFT, OUTER)
        GROUP BY
        Функции SQL (mean, min, max, avg, count)
        Subqueries
        Object Relational Mapping
        Основы работы с SQLAlchemy
        Механизм сессий в SQLAlchemy
        Создание базы данных с помощью моделей SQLAlchemy
        Миграции баз данных с помощью Alembic
        NoSQL-базы данных
        CAP теорема
        Типы NoSQL баз данных
        Работа с Redis
        Работа с Memcached
        Работа с MongoDB
        Брокер сообщений RabbitMQ
        Основы работы с Celery
        Web-разработка
        Классификация web frameworks
        Язык шаблонов Jinja2
        Основы API
        Стандарты API (REST, XML-RPC, Swagger, JSON API)
        Архитектурный подход API First
        Основы работы с Flask
        """
        item2.skills = """
        После курса вы сможете:
        Разрабатывать программы на языке Python
        """
        item2.image = UIImage(named: "")
        
        let item3 = CourseItem()
        item3.title = "Веб-разработка на Python/Django"
        item3.description = """
        Описание курса
        Django - свободный фреймворк для веб-приложений на языке Python. Интуитивно понятный язык шаблонов, имеет мощные и эффективные средства работы с базами данных и сессиями, встроенные средства авторизации пользователей и администрирования. Все это позволяет быстро и качественно разрабатывать веб-приложения коммерческого уровня.
        Записавшись на курс, вы сможете в короткие сроки овладеть описанными возможностями фреймворка, а также применить их на практике в рамках выполнения учебного проекта.
        """
        item3.informatiion = """
        Программа курса:
        Введение в Django.
        Запуск проекта.
        Файл settings.py
        Основные принципы работы.
        Базы данных. Модели.
        Понятие модели.
        Создание модели.
        Связи в базе данных.
        Система URL-адресов.
        Slug-адреса.
        Динамические адреса.
        Статические адреса.
        Namespace.
        Шаблонизатор.
        Система шаблонов.
        Фильтры.
        Теги.
        Создание своих фильтров, тегов.
        Практика.
        Формы, валидаторы форм.
        Форма на основании моделей.
        html-форма.
        Django-forms.
        Сlass-based views
        Аутентификация/авторизация/регистрация пользователей.
        Отправка сообщений на почту/телеграмм.
        Практика.
        Создание rest-api.
        django-rest-framework.
        Введение в front end.
        Базовые принципы языка JavaScript.
        Базовые понятия CSS.
        Настройка front end-части проекта.
        Библиотека jquery. Фреймворк Vue.js.
        Технология ajax.
        Использование REST-API.
        Реактивные данные.
        """
        item3.skills = """
        После курса вы сможете:
        Профессионально разрабатывать коммерческие веб-приложения с использованием Django
        """
        item3.image = UIImage(named: "")
        
        let item4 = CourseItem()
        item4.title = "Python/R for Data science"
        item4.description = """
        Описание курса
        Как понять, достаточно ли вы сильны для прохождения этого курса? Просто дайте самому себе ответы на следующие вопросы: интересует ли вас работа с данными (таблицами данных), манипуляции с ними и их визуализация? Помните ли вы из школы /университета/работы суть понятий «медиана», «мода», «распределение вероятностей»? Если ответы положительные, то у вас хорошие шансы на успешное прохождение курса.   Этот курс будет полезен:
        Специалистам, которые хотят начать карьеру в Data science;
        Специалистам по Data science, которые еще не освоили возможности работы с данными в Python или R;
        Специалистам, работающим с данными (аналитикам, бизнес-аналитикам, исследователям), которые хотят освоить новые гибкие инструменты для работы с данными.
        Философия курса: обратите внимание, что этот курс не сделает из вас полноценных разработчиков на Python или R. С точки зрения data science, это, в первую очередь, два удобных инструменты для выполнения рабочих задач.
        """
        item4.informatiion = """
        Программа курса:
        Модуль 1. Введение в машинного обучения и Data science
        Определение машинного обучения и науки о данных, их задачи.
        Инструментарий для анализа данных: языки программирования Python и R.
        Типы машинного обучения.
        Составные части модели машинного обучения.
        Базовые концепты машинного обучения.
        Модуль 2. Основы языков программирования Python и R для Data science
        IDE для удобной работы: Jupyter, Spyder & Rstudio.
        Семантика языка.
        Типы данных.
        Структуры данных.
        Операторы контроля исполнения (разветвления и циклов).
        Векторизация в Python (numpy) i R.
        Модуль 3. Функциональное программирование в Python и R
        Comprehension, Generators, Iterators в Python.
        Функции в Python i R.
        Встроенные функции Python.
        Apply-family функции в R.
        Библиотека purrr для функционального программирования в R.
        Модуль 4. Исследование и подготовка данных к анализу
        Numpy.
        Pandas.
        Фильтрация и агрегация данных в dplyr.
        Long & wide форматы таблиц, их преобразования в библиотеках pandas & tidyr.
        Модуль 5. Визуализация данных в R i Python
        Визуализация данных в R.
        """
        item4.skills = """
        После курса вы сможете:
        Понимать основные алгоритмы машинного обучения и практически их использовать для задач классификации и регрессии;
        Анализировать данные и строить модели машинного обучения с помощью Python i R;
        Делать качественные и интерактивные визуализации данных.
        """
        item4.image = UIImage(named: "")
        
        let course = CourseSubject()
        course.title = "PYTHON"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2, item3, item4]
        return course
    }
    func makeCCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "C++ Base"
        item1.description = """
        Описание курса
        Курс состоит из 11 занятий общей длительностью в 36 академических часов. В курсе предусмотрено 11 лабораторных работ для самостоятельного усвоения материала. Основной задачей курса является обучение слушателей теоретическим основам объектно-ориентированного программирования, приемам разработки ПО, решения типичных задач программирования и разработки приложений на языке С++.
        """
        item1.informatiion = """
        Программа курса:
        Немного истории
        Что такое язык программирования
        Машинные языки
        Низкоуровневые языки (язык ассемблера)
        Высокоуровневые языки
        Трансляторы
        Компиляция
        Интерпретация
        Парадигмы программирования
        Модульная парадигма программирования
        Функциональная парадигма программирования
        Обобщенная парадигма программирования
        Объектно ориентированная парадигма программирования
        История С++
        Основы GIT-системы контроля версии
        Что такое система контроля версии и что она решает
        Основные элементы git
        Что такое коммит
        Что такое ветка
        Способы создания репозитория. Виды сервисов, позволяющие создать удаленный репозиторий
        Базовые команды git
        Практика. Создания репозитория локально. Создания репозитория на удаленном сервере
        Состав языка С++
        Пример простой программы С++
        Базовые способы собрать приложение
        Алфавит языка
        Что такое лексемы
        Что такое идентификатор как важная составляющая программы
        Что такое ключевые слова
        
        """
        item1.skills = """
        После курса вы сможете:
        Разрабатывать ПО на языке C++
        Выполнять математические расчеты, решать задачи и реализовывать типовые алгоритмы
        Разрабатывать консольные приложения в операционной системе Linux
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "C++ Advanced"
        item2.description = """
        Описание курса
        Продвинутый курс C++ поможет усовершенствовать навыки ООП. Вы научитесь работать со стандартной библиотекой C++, освоите основные возможности библиотеки Qt, получите практический опыт разработки GUI-приложений. Мы обучим вас приемам разработки ПО, решениям типичных задач программирования и разработки GUI-приложений на языке С++ с помощью библиотеки Qt. Вы узнаете о контейнерах, алгоритмах и адаптерах, разберетесь в архитектуре приложений и базах данных, поработаете с многопоточностью и модульным тестированием ПО.
        """
        item2.informatiion = """
        Программа курса:
        Многопоточность в Qt
        Работа с базами данных в Qt
        Model View в Qt
        Введение в QML
        Введение в Qt
        Сетевое программирование
        Потоки в С++
        Процессы и потоки
        Компаратор
        Алгоритмы STL
        Итераторы
        Класс std::string
        Контейнеры в библиотеке STL
        Введение в STL
        Умные указатели
        Исключительные ситуации
        Вывод типа в С++ (type deduction)
        Написание библиотек на языке С++
        Более сложные применение шаблонов
        Динамический полиморфизм
        Статический полиморфизм
        Конструкторы/деструкторы
        """
        item2.skills = """
        После курса вы сможете:
        Усовершенствуете навыки объектно-ориентированного программирования, анализа и проектирования
        Работать со стандартной библиотекой С++ и библиотекой Qt
        Разрабатывать GUI-приложения
        Претендовать на получение высокооплачиваемой работы
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "C++"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2]
        return course
    }
    func makeVebCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Основы дизайна и графические редакторы"
        item1.description = """
        Описание курса
        Хотите научиться работать с векторными и растровыми изображениями, ретушировать фотографии, создавать Gif-анимации и подготавливать дизайн-макеты к верстке вебсайтов? Тогда этот курс именно для Вас!
        """
        item1.informatiion = """
        Программа курса:
        Знакомство и возможности программы Adobe Photoshop. Создание и сохранение файлов
        Понятие «Растровое изображение». Отличия между растровым и векторным изображением. Области применения
        Виды цветовых моделей. Особенности и области применения различных цветовых моделей
        Интерфейс, настройка рабочего пространства
        Создание нового изображения. Изменение основных параметров изображений
        Работа со слоями
        Понятие слоя. Виды слоев. Меню «Слой» («Layer»)
        Способы создания слоя. Работа со слоями. Параметры слоя
        Управление слоями с помощью палитры «Layers»
        Особенности работы с многослойным изображением
        Выделение и связывание нескольких слоев. Трансформация содержимого слоя
        Операции со слоями. Слияние слоев. Группировка
        Стили для слоев
        Инструменты выделения. Меню Выделение (Select)
        Назначение различных инструментов выделения, настройка параметров
        Трансформация формы выделения. Дополнение, вычитание и пересечение областей выделения
        Растушевка границы области выделения
        Выделение мягких и жестких форм
        Инструмент «Уточнить край» и коррекция выделенной области
        Действия с выделенной областью: перемещение, дублирование, масштабирование, поворот, искажение выделенной области
        Цветокоррекция
        Подготовка к цветокоррекции
        Базовая цветокоррекция. Команды тоновой и цветовой коррекции. Команды «Быстрой» коррекции
        Использование корректирующих слоев
        Преобразование цветной фотографии в черно-белую
        Ретушь фотографии
        Этапы ретуши фотографий (портрет)
        Чистка и восстановление деталей изображения с помощью инструментов «Clone Stamp», «Spot Healing Brush», «Healing Brush». Чистка кожи
        Цветокоррекция отдельных участков изображения. Изменение насыщенности Осветление и затемнение участков изображения. (отбеливание зубов, замена цвета глаз и волос)
        Добавление элементов изображения (волосы)
        Фильтр «Liquify» и коррекция фигуры
        Использование инструмента «History Brush»
        Работа с текстом
        Создание текстового слоя
        Деформация надписи
        Создание огненного текста при помощи эффектов слоя
        Работа со стилями. Как установить стили. Применение стилей и их коррекция. Создание железного текста.
        Работа с междустрочным и межбуквенным расстоянием, изменение высоты строк. Создание текстовых композиций
        Работа с mock-up
        Изображения для социальных сетей, веб страниц
        Размеры, разрешения, форматы
        «Smart Filters»
        Сохранение элементов дизайна для веб
        Анимация
        Работа с шкалой времени
        Рабочая среда Adobe Illustrator. Основные операции с документом
        Основные элементы окна Adobe Illustrator CS. Палитры. Главное меню. Контекстные меню
        Работа с документами. Создание, сохранение, открытие документа. Восстановление предыдущей версии документа. Шаблоны документов
        Режимы просмотра документа Масштабирование. Навигация по документу
        Отмена и повторение последних действий
        Создание простых объектов и их трансформация
        Создание простых фигур: прямоугольники, эллипсы, многоугольники, звезды, линии, дуги, спирали, сетки
        Выделение объектов. Инструменты выделения
        Трансформация объектов
        Перетекание объектов. Перетекания на траектории. Параметры перетекания
        Манипулирование объектами
        Перемещение объектов. Перемещение объектов между документами. Размещение объектов
        Создание копий и дубликатов объектов
        Группирование и разгруппирование объектов. Выделение объектов в группе. Блокирование и разблокирование объектов
        Операции компоновки и комбинирования объектов
        Выравнивание объектов
        Невидимые объекты
        Удаление объектов
        Подготовка изображений для веба
        Подготовка изображений для размещения на сайтах
        Подготовка макетов для верстки сайтов
        Вспомогательные средства Adobe Illustrator CS
        Вспомогательные средства для точного рисования
        Атрибуты отображения объекта. Линейки. Единицы измерения шкалы линеек
        Направляющие. Создание направляющих. Перемещение и поворот направляющих. Удаление направляющих. «Умные» направляющие. Создание направляющей из объекта
        """
        item1.skills = """
        После курса вы сможете:
        Работать в графических редакторах Adobe Photoshop, Adobe Illustrator, Figma/Sketch
        Редактировать изображения и рисовать простые макеты сайтов
        Готовить макеты для верстки веб-сайтов и основам допечатной подготовки.
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Графический дизайн"
        item2.description = """
        Описание курса
        Курс научит вас разрабатывать логотипы и переносить объекты в символы. В процессе обучения вы углубитесь в теорию цвета, научитесь их правильно сочетать, работать с текстами, типографикой и композицией, разберетесь с заданиями лого и фирменного стиля, узнаете о шрифтовых плакатах, лейблах
        """
        item2.informatiion = """
        Программа курса:
        История и тренды графического дизайна
        История развития графического дизайна
        Популярные стили
        Кто задает тренды?
        Ресурсы для поиска вдохновения
        Скетчинг
        Техники и инструменты
        Быстрая зарисовка идей
        Золотое сечение
        Золотое сечение
        Числа Фибоначчи
        Правило третей
        Поиски и подбор идеальных пропорций
        Композиция
        Закон близости объектов
        Ритм, статика и динамика
        Правильная расстановка акцентов
        Визуальная иерархия
        Форма и контрформа
        Перспектива и пространство
        """
        item2.skills = """
        После курса вы сможете:
        Грамотно и корректно визуализировать задуманные идеи согласно законам композиционного построения
        Придерживаться структуры при построении макета и, благодаря этому, улучшать логичность иерархии сайта
        Правильно использовать свой творческий потенциал и генерировать нестандартные решения для дизайна
        """
        item2.image = UIImage(named: "")
        
        let item3 = CourseItem()
        item3.title = "UX Design"
        item3.description = """
        Описание курса
        Программа курса охватывает все этапы проектирования интерфейсов: исследования проблем, поиск решений, создание прототипов и тестирования.
        """
        item3.informatiion = """
        Программа курса:
               Вступление
        Введение в дизайн интерфейсов
        Понятия UX и UI дизайна
        Методы исследований
               Поиск проблем и определение UX-задач
        Основы Customer Development
        Методика Design Thinking
        Составление персон и Customer Journey Maps
        Интервью c пользователями
        Сбор и анализ информации
              Идеи и решения
        Вспомогательный софт (Figma, Miro)
        Основы информационной архитектуры
        HMW / PAINstorming
        Mindmapping
        Скетчинг и card sorting
        """
        item3.skills = """
        После курса вы сможете:
        Исследовать и анализировать потребности пользователей;
        Работать с данными и аналитикой;
        Строить правильную информационную архитектуру, руководствуясь потребностями пользователей;
        Проектировать веб- и мобильные интерфейсы;
        Работать в разных типах команд, осознавая свою роль
        """
        item3.image = UIImage(named: "")
        
        let item4 = CourseItem()
        item4.title = "UI Design"
        item4.description = """
        Описание курса:
        В процессе обучения Вы узнаете о секретах “продающего” визуального дизайна, разберетесь в психофизиологии графических интерфейсов, изучите основные формы и элементы интерфейса, а также откроете для себя лучшие тренды веб-дизайна.
        Курс рассчитан как для новичков так и для тех, кто уже работает в дизайне, но желает систематизировать имеющийся опыт и заполнить пробелы в знаниях.
        """
        item4.informatiion = """
        Программа курса:
        Введение к курсу UI
        Этапы разработки продукта
        Понятие UI и UX. Роль UI дизайнера на проекте
        Инструменты. Графические редакторы Sketch, Figma
        Основы работы в Sketch и Figma.
        Краткий обзор вспомогательных инструментов (Invision, Avocode, Illustrator, Photoshop)
        Сбор требований и этап исследования
        Интервью с заказчиком, формирование брифа
        Изучение рынка и поиск референсов
        Создание мудборда проекта
        Презентация этапов работы
        """
        item4.skills = """
        После курса вы сможете:
        Создавать и оптимизировать цифровой пользовательский интерфейс
        Находить и предлагать наиболее простые точки взаимодействия пользователя с системой
        Правильно управлять иконками, анимацией и другим графическим контентом на сайте
        Разрабатывать и внедрять эффективные решения для повышения функциональности веб-сайта
        """
        item4.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "VEB DESIGN"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Design"
        course.courseItem = [item1, item2, item3, item4]
        return course
    }
    func makeDigitalMarketingCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Social Media Marketing (SMM)"
        item1.description = """
        Описание курса
        Курс Social Media Marketing на примере Facebook и Instagram научит вас использовать социальные сети для продвижения продукта.
        """
        item1.informatiion = """
        Программа курса:
        Введение
        Роль социальных сетей в маркетинге и бизнесе.
        Обзор возможностей и преимущества ведения социальных сетей и таргетированной рекламы.
          Определение целей и задач бизнеса
        Определение целей и задач бренда/бизнеса в соцсетях
        Понятие KPIs. Формирование KPIs для SMM
          Стратегия в SMM
        Разработка SMM стратегии.
        Сегментация целевой аудитории. Составление карты эмпатии. Определение формата коммуникации
        Формирование воронки продаж
        Построение контент-стратегии. Формирование контент-плана
        """
        item1.skills = """
        После курса вы сможете:
        Формировать SMM-стратегию продвижения бизнеса, исходя из потребностей ЦА;
        Настраивать, запускать и администрировать рекламные кампании;
        Управлять репутацией компании и формировать комьюнити.
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Creative & Copywriting"
        item2.description = """
        Описание курса
        На курсе Copywriting & Creative мы овладеем техниками создания идей и разберемся как превращать идеи в креативный рекламный продукт, в частности в тексты.
        """
        item2.informatiion = """
        Программа курса:
        Лекция 1. Homo scriptoris и миф о креативности (2:00)
        Знакомство и коррекция ожиданий от участников курса
        Креатор, райтер, копирайтер, контент-менеджер
        Творчество VS Креативность
        Текст. Рекламный текст
        Муза креатора и где ее искать
        Работа с реальными кейсами
        Домашнее задание
        Лекция 2. Путь идеи от брифа до key visual & key message (2:00)
        Что бриф за зверь и как его едят?
        Инсайт - как попасть и не потерять
        Миссия найти идею (брейншторминг и другие методики и техники генерирования идей, тестирование идей)
        RAM
        key visual & key message - общие правила игры
        Работа с реальными кейсами
        Домашнее задание
        Старт работы над курсовым проектом
        """
        item2.skills = """
        После курса вы сможете:
        Разрабатывать креативные продающие идеи
        Писать сильно
        Создавать тексты для различных каналов коммуникации
        """
        item2.image = UIImage(named: "")
        
        let item3 = CourseItem()
               item3.title = "Email-маркетинг"
               item3.description = """
               Описание курса
               Курс E-mail-marketing —  это обучение созданию электронных рассылок, которые являются лучшим инструментов повторных и дополнительных продаж.
               """
               item3.informatiion = """
               Программа курса:
               Введение в e-mail-маркетинг
               Зачем бизнесу нужен e-mail-маркетинг?
               Выбор сервиса рассылок
               Как не попасть в спам?
               Какую рассылку выбрать: ручную или автоматическую?
                 Сбор базы для рассылки
               Где взять подписчиков?
               Инструменты сбора подписчиков и сервисы
               Превращаем посетителей сайта в подписчиков
               Как получить подписчиков из оффлайн каналов
               Виды форм подписок и где их размещать
               Что такое лид магнит и как с ним работать
               Как проводить правильные эксперименты при сборе контактов на сайте
               """
               item3.skills = """
               После курса вы сможете:
               Анализировать инструменты email маркетинга и создавать письма для рассылки
               Превращать посетителей сайта в подписчиков, а затем клиентов
               Создавать автоматические сценарии писем (триггеры)
               Анализировать и понимать основные показатели эффективности email рассылок
               """
               item3.image = UIImage(named: "")
        
        
        
        let course = CourseSubject()
        course.title = "DIGITAL MARKETING"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Marketing"
        course.courseItem = [item1, item2, item3]
        return course
    }
    func makeGameDevelopmentCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Unity3D"
        item1.description = """
        Описание курса
        Курс рассчитан на людей, уже знакомых с С# как минимум на среднем уровне, имеющих небольшой опыт программирования, а также на младших Unity3D специалистов
        """
        item1.informatiion = """
        Программа курса:
        Основы работы с редактором
        Создание сцены
        Знакомство с Inspector
        Game View
        Scene View
        Импортирование внешних ассетов
        Знакомство с основными системами движка: анимация, работа с UI, работа со звуком, asset store, создание первого скрипта
        Основы скриптования
        MonoBehaviour
        GameObject
        Transform
        Input
        Векторы
        Математическая библиотека
        Шкала времени
        Корутины
        PlayerPrefs
        Application и менеджмент сцен
        """
        item1.skills = """
        После курса вы сможете:
        Работать с основными элементами редактора Unity3D
        Самостоятельно создавать игровое приложение и размещать его в маркете
        Проходить собеседования на Junior+ Unity3d разработчика в ведущие игровые студии Киева
        Правильно структурировать архитектуру игры
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Геймдизайн"
        item2.description = """
        Описание курса
        Геймдизайн —  программа обучения, направленная на получения знаний в области игровой разработки. Геймдизайнеры являются генераторами идей для новых игр, создателями и вдохновителями будущих шедевров индустрии компьютерных развлечений.
        """
        item2.informatiion = """
        Программа курса:
        Гейм дизайнер работает с бумагой
        Определение понятия геймдизайна как рода деятельности.
        Навыки, которыми должен обладать гейм дизайнер.
        Что делает гейм дизайнер. Определение опыта, создаваемого гейм-дизайнером
        Что такое игра?
        Что такое игры. Чем игры отличаются от игрушек.
        Фан - что это.
        Игровые жанры.
        Игровые платформы.
        Из чего состоит игра
        Составные части игры - четыре основных элемента.
        Основные игровые элементы.
        Влияние игровых элементов на создаваемый опыт.
        Генерация идей
        Откуда берутся идеи.
        Как генерировать идеи и при помощи чего
        Красть и делиться - хорошо или плохо?
        Совместная генерация идей с аудиторией
        """
        item2.skills = """
        После курса вы сможете:
        Понимать подходы к созданию игр;
        Разбираться в сеттинге, персонажах, игровой механике;
        Учитывать требования пользователей при разработке игры;
        Настраивать игровой процесс и баланс;
        Работать с командой разработчиков.
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "GAME DEVELOPMENT"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2]
        return course
    }
    func makeMobileDevelopmentCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "IOS Base"
        item1.description = """
        Описание курса
        Курс ориентирован на изучение программирования на iOS с нуля. Слушатели курса овладеют приемами программирования и изучат особенности iOS-разработки. Уроки помогут начинающим научиться мыслить в рамках платформы iOS. Изучение языка Swift, понимание внутреннего строения и механизмов работы приложений позволят слушателю успешно окончить курс и создать приложение для портфолио.
        """
        item1.informatiion = """
        Программа курса:
        Общие сведения и настройки для разработки
        Введение. Документация Apple
        Среда разработки Xcode. Настройка симуляторов устройств
        Создание проекта
        Общие приемы ООП
        Шаблоны проектирования
        Обобщение и параметризация
        Изучение языка Swift
        Основные сведения о языке. Синтаксис
        Операторы
        Строки и символы
        Коллекции
        Управленческие структуры
        ООП в Swift
        Свойства и методы
        Наследование и инкапсуляция
        Жизненный цикл объектов
        Механизмы управления памятью
        Протоколы, категории
        Работа с ресурсами
        Строки, локализация
        Изображения
        Работа с коллекциями
        Наборы (Set)
        Массивы (Array)
        Словари (Dictionary)
        Поток
        Потоки Thread
        Очереди Queues
        Библиотека Grand Central Dispatch (GCD)
        Подробная работа с графикой в ​​Interface Builder
        Xib-файлы
        Storyboard
        Основы работы с системой контроля версий
        Контроллеры и переходы между ними (Segue)
        Элементы стандартной библиотеки Cocoa Touch
        Диалоговые окна UIAlertView
        Модальные меню UIActionSheets
        Навигация с помощью UINavigationController, UITabBarController
        Рисование и анимация
        Core Graphics и элементарные графические примитивы
        Анимация
        Отображение множества элементов
        Таблица (UITableView)
        Произвольная двумерная коллекция (UICollectionView)
        Обработка пользовательского ввода
        Кнопки, поля, выпадающее меню
        Жесты, нажатие (3D Touch)
        Адаптивная верстка интерфейсов
        Адаптивная верстка с помощью Autolayout
        Ручная верстка
        Общие настройки программы и оптимизация
        Подключение и использование сторонних библиотек (Cocoapods)
        Анализ потребления памяти
        Анализ производительности
        Практическое занятие. Подготовка финального проекта
        """
        item1.skills = """
        После курса вы сможете:
        Создавать standalone-приложения для iPhone и iPad, размещать их на AppStore
        Понимать ООП-подход и мыслить в его рамках при создании приложений
        Разбираться в документации к платформе iOS
        Читать, понимать, изменять чужой код
        Рассчитать возможности и время на создание приложения
        Изучить узкоспециализированные возможности платформы iOS

        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "IOS Advanced"
        item2.description = """
        Описание курса
        Курс является логическим продолжением курса «iOS базовый». На протяжении занятий будут рассматриваться технологии, необходимые в динамическом программировании – многопоточность, работа с базами данных, передача и прием данных по интернету, работа со сторонними сервисами (карты, API-сервисы интернет-ресурсов) и пр.
        Слушатели Продвинутого курса iOS создадут standalone-приложения на iPhone или iPad, наделят их коммуникативностью для обмена информацией с сервером, представят в виде клиентской стороны большой вычислительной системы, реализуют множество дополнительных технологичных функций.
        """
        item2.informatiion = """
        Программа курса:
        Детальное изучение сложных предустановленных шаблонов iOS-проектов
        Page-Based Application
        Tabbed Application
        Master-Detail Application
        Фоновый режим работы приложения
        Background Modes, Background Fetch
        CoreData
        Общие принципы и включение механизма в проект
        Модели и связи
        Запись и чтение данных
        Работа с системой контроля версий
        Networking
        Загрузка и отображение Web-страницы. Графический элемент UIWebView. Основы HTML
        Класс NSURLConnection. Основные принципы передачи данных. Загрузка файла
        HTTP-протокол. GET-, POST-, Multipart-запросы. Формат JSON
        Системные и пользовательские события
        Нотификации (Local/Remote)
        Обработка изображений
        Класс Core Image
        Методики обработки изображений
        Сенсоры и датчики
        Обработка изображений
        Телефония, входящие/исходящие звонки
        Отправка/прием SMS-сообщений
        Отправка email
        Список контактов, запись/чтение контактов
        GPS/MapKit
        Механизм получения и обработки геоданных CoreLocation
        Apple-карты MapKit
        Google Maps
        Push-сообщения
        Интеграция с различными Apple- и другими открытыми Web-сервисами
        Социальные сети
        Принципы тестирования и профилирования приложений
        Темы по пожеланиям студентов
        Публикация приложения в App Store
        """
        item2.skills = """
        После курса вы сможете:
        Самостоятельно создавать приложения для iPhone и/или iPad и размещать их в iTunes
        Использовать базовые и специализированные технологии платформы
        Легко применять сторонние технологии в проектах
        Читать, понимать, изменять чужой код
        Рассчитать возможности и время на создание приложения
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "MOBILE DEVELOPMENT"
        course.image = UIImage(named: "")
        course.time = "Evening"
        course.type = "Programming"
        course.courseItem = [item1, item2]
        return course
    }
    func makeCiscoCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Configuring the Cisco Nexus 9000 in NX-OS Mode"
        item1.description = """
        Кому следует посетить
        This course is designed for traditional network and data center engineers tasked with the installation and operation of Cisco Nexus 9000 Series Switches in a data center environment who want to upgrade their skills.
        Targeted roles include:
        Data center engineers
        Technical support personnel
        Network engineers
        """
        item1.informatiion = """
        Содержание курса
        Architecture and operation of the Cisco NX-OS operating system
        Port channels
        Virtual port channels Open Shortest Path First (OSPF)
        Border Gateway Protocol (BGP)
        Bidirectional Forwarding Detection (BFD)
        Troubleshooting CPU and memory issues in detail
        Broadcom shell
        Quality of Service (QoS)
        Network programmability
        License installation and maintenance procedures
        """
        item1.skills = """
        Цели курса
        You learn the hardware and software architecture of the Cisco Nexus 9000 series of data center switches, including the Cisco Nexus 9300 fixed-configuration and Cisco Nexus 9500 modular platforms. Also, you have the opportunity to explore the programmability and automation features built in to these devices, including, but not limited to, Python, Power on Auto Provisioning (POAP), shell access, and the NX-API interface. Also, you discover how to perform management, maintenance, and monitoring activities on Cisco Nexus 9000 switch platforms.
        This course combines lecture materials and hands-on labs throughout to make sure you are able to successfully deploy, configure, maintain, and troubleshoot a Cisco Nexus 9000 switch infrastructure.
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Configuring Cisco Nexus 9000 Switches in ACI Mode 2.0"
        item2.description = """
        Кому следует посетить
        Курс разработан для:
        Сетевых инженеров, системных архитекторов в области облачных ЦОДов, администраторов серверов.
        Также курс будет полезен:
        Разработчикам приложений, инженерам в области информационной безопасности и администраторам виртуализированной инфраструктуры.
        """
        item2.informatiion = """
        Модуль 1: Введение в Cisco ACI
        Урок 1: Описание решения Cisco Nexus 9000 c инфраструктурой ACI
        Урок 2: Описание Cisco ACI Fabric
        Лабораторная работа 1: Изучение ACI Fabric
        Лабораторная работа 2: Конфигурирование основных сетевых моделей
        Урок 3: Описание аппаратной части коммутатора Cisco Nexus 9000
        Урок 4: Резюме модуля
        Урок 5: Тест для самопроверки
          Модуль 2: Конфигурация Cisco ACI
        Урок 1: Настройка Cisco APIC
        Лабораторная работа 3: Настройка фильтров полтик и контрактов
        Лабораторная работа 4: Развертвание трехуровневого профиля приложений
        Урок 2: Настройка уровня 4 через службы уровня 7
        Урок 3: Настройка интеграции гипервизора APIC
        Лабораторная работа 5: Регистрация домена VMM с помощью Cisco ACI
        Лабораторная работа 6: Настройка хостов VMware ESXi для использования Cisco APIC DVS
        Лабораторная работа 7: Настройка соединения EPG с доменом VMware vCenter
        Лабораторная работа 8: Настройка соединения виртуальной машины с группой портов EPG
        Лабораторная работа 9: Развертывание графического сервиса с профилем приложения
        Урок 4: Резюме модуля
        Урок 5: Тест для самопроверки
          Модуль 3: Программируемость и оркестровка Cisco ACI
        Урок 1: Демонстрация Cisco ACI Network Programmability
        Урок 2: Сетевая оркестровка Cisco ACI
        Лабораторная работа 10: Настройка Cisco APIC с использованием API REST
        Лабораторная работа 11: Экспортные контракты между абонентами
        Лабораторная работа 12: Настройка Cisco APIC с использованием Cisco APIC REST для адаптера Python (ARYA)
        Лабораторная работа 13: Настройка Cisco APIC с использованием API-интерфейса Cisco APIC Python
        Урок 3: Резюме модуля
        Урок 4: Тест для самопроверки
          Модуль 4: Внешняя связь, управление и миграция Cisco ACI
        Урок 1: Настройка подключения ACI к внешним сетям
        Лабораторная работа 14: Настройка Cisco APIC для связи с сетью внешнего уровня 3
        Лабораторная работа 15: Настройка Cisco APIC для связи с сетью внешнего уровня 2
        Лабораторная работа 16: Настройка Cisco APIC для передачи данных Bare Metal to Bare Metal
        Урок 2: Внедрение системы управления ACI
        Урок 3: Описание параметров миграции с помощью ACI
        Лабораторная работа 17: Мониторинг и устранение неполадок ACI
        Лабораторная работа 18: настройка APIC RBAC для локальных и удаленных пользователей
        Урок 4: Резюме модуля
        Урок 5: Тест для самопроверки
        """
        item2.skills = """
        После посещения тренинга Вы сможете:
        Описать Cisco Nexus 9000 Series Switch ACI
        Описать ACI fabric
        Описать аппаратную часть коммутатора Cisco Nexus 9000
        Конфигурировать ACI controller (APIC)
        Конфигурировать процесс интеграции ACI L4–L7
        Интегрировать гипервизор APIC
        Понимать программируемость и механизмы управления сетями с ACI
        Описать возможность подключения ACI к внешним сетям
        Внедрить ACI
        Описать способы миграции с ACI
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "CISCO"
        course.image = UIImage(named: "")
        course.time = "Daytime"
        course.type = "System administrator"
        course.courseItem = [item1, item2]
        return course
    }
    func makeLinoxCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Asterisk Administration Essentials"
        item1.description = """
        Базовый курс для администратора Asterisk  ( Asterisk – это супер конвергентная платформа компьютерной телефонии,распространяемая по лицензии GNU GPL).  Знания приобретенные в процессе обучения помогут вам быть успешным в работе.
        """
        item1.informatiion = """
        Модуль 1 Введение в Linux:
        Выбор ОС
        Плюсы и минусы ОС
        Основные команды для работы и навигации
        Файловая система
        Модуль 2 Asterisk и IP телефония:
        Что такое IP телефония
        Плюсы IP телефонии
        История появления Asterisk
        Версии Asterisk и их отличия
        Схемы использования IP телефонии
        Модуль 3 Установка Asterisk:
        Этапы установки Asterisk
        Подготовка ОС
        Скачивание исходных кодов
        Установка в особом порядке
        Модуль 4 Управление модулями в Asterisk:
        Структура директорий Asterisk
        Основные конфигурационные файлы
        Структура и синтаксис конфигурационных файлов
        Модульная архитектура
        Модуль 5 Работа с конфигурационными файлами:
        Создание основных конфигурационных файлов
        Описание каждого файла и пример его заполнения
        Модуль 6 Работа в консоли Asterisk:
        Описание всех возможных команд запуска консоли Asterisk
        Описание запуска Asterisk для отладки и после его неожиданного сбоя
        Рассмотрения основных команд в консоли Asterisk
        """
        item1.skills = """
        you will be a professional
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Red Hat Enterprise Linux"
        item2.description = """
        Курс адресован пользователям Linux/UNIX, которые хотят освоить методы системного администрирования Red Hat Enterprise Linux.  Этот курс длительностью 5 дней дает интенсивную практическую подготовку по Red Hat Enterprise Linux.
        """
        item2.informatiion = """
        Модуль 1 - Инициализация системы

        Последовательность загрузки ОС. Обзор
        Компоненты загрузчика ОС
        GRUB and conf
        Начальная загрузка ОС. GRUB
        Инициализация ядра ОС
        Процесс init
        Технология upstart
        Уровни исполнения
        /etc/rc.d/rc.sysinit
        /etc/rc.d/rc
        Уровни исполнения System V
        /etc/rc.d/rc.local
        Управление сервисами. Основы
        """
        item2.skills = """
        По окончании этого учебного курса слушатель будет уметь:
        устанавливать Red Hat Linux интерактивно и с помощью Kickstart;
        управлять стандартным системным оборудованием;
        создавать и обслуживать файловую систему Linux;
        настраивать клиента NFS и autofs;
        понимать процесс инициализации системы и служб;
        выполнять администрирование пользователей и групп;
        интегрировать рабочую станцию в существующую сеть, предоставляющую стандартные сетевые службы;
        настраивать рабочую станцию как клиента служб DNS, и DHCP;
        планировать выполнение задачи с помощью at, cron, и anacron;
        обслуживать и анализировать системные журналы (logs);
        выполнять резервное копирование;
        устанавливать, обновлять, запрашивать и удалять пакеты программ с помощью RPM;
        обновлять ядро Linux через RPM;
        настраивать систему X Window и рабочий стол GNOME;
        создавать виртуальные машины и управлять ими;
        выполнять базовое управление производительностью, памятью и процессами;
        настраивать базовую защиту системы;
        выполнять базовую диагностику.
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "LINUX"
        course.image = UIImage(named: "")
        course.time = "Daytime"
        course.type = "System administrator"
        course.courseItem = [item1, item2]
        return course
    }
    func makeMicrosoftCourse() -> CourseSubject{
        let item1 = CourseItem()
        item1.title = "Windows Server 2012"
        item1.description = """
        Приобретаемые навыки:
        Использовать групповые политики для управления компьютерами, учётными записями и настройками Windows
        Проектировать инфраструктуру для применения групповых политик
        """
        item1.informatiion = """
        Модуль 1. Введение в групповые политики

        Что такое групповые политики
        Сценарии использования
        Управление групповыми политиками
        Групповые политики в Windows Server 2003 и Windows XP
        Групповые политики в Windows Server 2008 и Windows Vista
        Групповые политики в Windows Server 2008R2 и Windows 7
        Групповые политики в Windows Server 2012 и Windows 8
        Лабораторная работа
        """
        item1.skills = """
        you will be good guy
        """
        item1.image = UIImage(named: "")
        
        let item2 = CourseItem()
        item2.title = "Windows Server 2016"
        item2.description = """
        Цель курса – предоставить слушателям знания и навыки, необходимые для управления широким спектром серверных и клиентских продуктов. В курсе рассмотрены технологии, которые позволяют интегрировать Windows PowerShell с Microsoft Exchange Server, Microsoft Windows Active Directory Domain Services, Microsoft SharePoint Server. Данный курс фокусируется на создании сценариев Windows PowerShell, на изучении понятий и методов, необходимых для создания многоразовых профессиональных инструментов.
        """
        item2.informatiion = """
        Модуль 1: Подготовка к написанию скриптов
        Темы
        Вопросы безопасности в среде выполнения сценария
        Переменные и операторы
        Скриптовые конструкции и области
        Модуль 2: Параметризированные команды
        Темы
        Конструирование параметра
        Использование параметра
        Лабораторная работа: Параметризированные команды
        Определение изменяемых значений
        Декларация параметров
        Использование параметров вместо изменяемых значений
        Тестирование сценария
        """
        item2.skills = """
        way to go!!
        """
        item2.image = UIImage(named: "")
        
        
        let course = CourseSubject()
        course.title = "MICROSOFT"
        course.image = UIImage(named: "")
        course.time = "Daytime"
        course.type = "System administrator"
        course.courseItem = [item1, item2]
        return course
    }
}


// MARK: - Users

extension Storage {
    
    func makeUsers() -> User {
        
        let user1 = User()
        user1.name = "Valeriia"
        user1.surName = "Zakharova"
        user1.age = "27"
        user1.birthday = "20.12.1991"
        user1.city = "Kharkiv"
        user1.email = "valeriia@gmail.com"
        user1.password = "qweasdzxc"
        user1.phone = "+380996849017"
        user1.photo = UIImage(named: "photo")
        
        let items = makeTestingCourse().courseItem + makeCiscoCourse().courseItem
        
        user1.completedCourses = items
        if let course = makeMobileDevelopmentCourse().courseItem.first {
            user1.currentCourse = course
        }
        return user1
    }
    
}
